// Mocks generated by Mockito 5.4.4 from annotations
// in csr_crm/test/domain/projects/usecases/get_all_projects_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:csr_crm/core/error/failures.dart' as _i5;
import 'package:csr_crm/domain/projects/entities/project.dart' as _i6;
import 'package:csr_crm/domain/projects/repository/project_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRepository extends _i1.Mock implements _i3.ProjectRepository {
  MockProjectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>> getAllProjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProjects,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Project>>(
          this,
          Invocation.method(
            #getAllProjects,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Project>> getProjectById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>.value(
            _FakeEither_0<_i5.Failure, _i6.Project>(
          this,
          Invocation.method(
            #getProjectById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> createProject(
          _i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateProject(
          _i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteProject(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteProject,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>> getProjectsByStatus(
          _i6.ProjectStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectsByStatus,
          [status],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Project>>(
          this,
          Invocation.method(
            #getProjectsByStatus,
            [status],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>
      getProjectsByOrganization(String? organizationId) => (super.noSuchMethod(
            Invocation.method(
              #getProjectsByOrganization,
              [organizationId],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Project>>(
              this,
              Invocation.method(
                #getProjectsByOrganization,
                [organizationId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>> searchProjects(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProjects,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Project>>(
          this,
          Invocation.method(
            #searchProjects,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Project>>>);
}
